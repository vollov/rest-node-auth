store session?
https://www.airpair.com/express/posts/expressjs-and-passportjs-sessions-deep-dive
npm install express body-parser morgan mongoose jsonwebtoken --save
impl
https://scotch.io/tutorials/authenticate-a-node-js-api-with-json-web-tokens
https://aleksandrov.ws/2013/09/12/restful-api-with-nodejs-plus-mongodb/

http://code.tutsplus.com/tutorials/authenticating-nodejs-applications-with-passport--cms-21619
https://scotch.io/tutorials/easy-node-authentication-setup-and-local
** http://www.sitepoint.com/local-authentication-using-passport-node-js/
http://stackoverflow.com/questions/17400758/comprehensive-tutorial-for-nodejs-passport-local-strategy-setup


========================
session store:

{ "_id" : "xYLhs_4GwajYbIO8256Mgn4YWRe7gyfK", "session" : 
{ "cookie" : { "originalMaxAge" : 60000, "expires" : ISODate("2016-02-14T03:40:32.549Z"), "secure" : null, "httpOnly" : true, "domain" : null, "path" : "/" }, 
"passport" : { "user" : "56bd5d83f002670a337c1a12" } 
}, "expires" : ISODate("2016-02-14T03:40:32.549Z") }


jsonwebtoken
===============================
when user authenticated, server need generate a 'token'

app.locals.seesion_second = 3600

var token = jwt.sign(user, user.password, {
    expiresInMinutes: app.locals.seesion_second/60 // expires in 24 hours =24*60min 1440
});

// route middleware to verify a token
apiRoutes.use(function(req, res, next) {

  // check header or url parameters or post parameters for token
  var token = req.body.token || req.query.token || req.headers['x-access-token'];

  // decode token
  if (token) {

    // verifies secret and checks exp
    jwt.verify(token, app.get('superSecret'), function(err, decoded) {      
      if (err) {
        return res.json({ success: false, message: 'Failed to authenticate token.' });    
      } else {
        // if everything is good, save to request for use in other routes
        req.decoded = decoded;    
        next();
      }
    });

  } else {

    // if there is no token
    // return an error
    return res.status(403).send({ 
        success: false, 
        message: 'No token provided.' 
    });
    
  }
});


=================================

		  // find the user
		  User.findOne({
		    name: req.body.name
		  }, function(err, user) {

		    if (err) throw err;

		    if (!user) {
		      res.json({ success: false, message: 'Authentication failed. User not found.' });
		    } else if (user) {

		      // check if password matches
		      if (user.password != req.body.password) {
		        res.json({ success: false, message: 'Authentication failed. Wrong password.' });
		      } else {

		        // if user is found and password is right
		        // create a token
		        var token = jwt.sign(user, app.get('superSecret'), {
		          expiresInMinutes: 1440 // expires in 24 hours
		        });

		        // return the information including token as JSON
		        res.json({
		          success: true,
		          message: 'Enjoy your token!',
		          token: token
		        });
		      }   

		    }

		  });